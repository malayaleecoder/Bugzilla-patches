# HG changeset patch
# User malayaleecoder <malayaleecoder@gmail.com>
# Date 1457726699 -19800
#      Sat Mar 12 01:34:59 2016 +0530
# Branch BUG1252481
# Node ID b9082697734d0841112117a54098552781e51636
# Parent  8dd2fcbe6c65981b1cebc8186d6633f2df249c0f
Bug 1252481 - Remove sum_squares_lo and sum_squares_hi from Histogram serialization

diff --git a/toolkit/components/telemetry/Telemetry.cpp b/toolkit/components/telemetry/Telemetry.cpp
--- a/toolkit/components/telemetry/Telemetry.cpp
+++ b/toolkit/components/telemetry/Telemetry.cpp
@@ -1235,29 +1235,16 @@ ReflectHistogramAndSamples(JSContext *cx
                              h->declared_max(), JSPROP_ENUMERATE)
         && JS_DefineProperty(cx, obj, "histogram_type",
                              h->histogram_type(), JSPROP_ENUMERATE)
         && JS_DefineProperty(cx, obj, "sum",
                              double(ss.sum(locker)), JSPROP_ENUMERATE))) {
     return REFLECT_FAILURE;
   }
 
-  if (h->histogram_type() != Histogram::HISTOGRAM) {
-    // Export |sum_squares| as two separate 32-bit properties so that we
-    // can accurately reconstruct it on the analysis side.
-    uint64_t sum_squares = ss.sum_squares(locker);
-    // Cast to avoid implicit truncation warnings.
-    uint32_t lo = static_cast<uint32_t>(sum_squares);
-    uint32_t hi = static_cast<uint32_t>(sum_squares >> 32);
-    if (!(JS_DefineProperty(cx, obj, "sum_squares_lo", lo, JSPROP_ENUMERATE)
-          && JS_DefineProperty(cx, obj, "sum_squares_hi", hi, JSPROP_ENUMERATE))) {
-      return REFLECT_FAILURE;
-    }
-  }
-
   const size_t count = h->bucket_count();
   JS::Rooted<JSObject*> rarray(cx, JS_NewArrayObject(cx, count));
   if (!rarray) {
     return REFLECT_FAILURE;
   }
   if (!(FillRanges(cx, rarray, h)
         && JS_DefineProperty(cx, obj, "ranges", rarray, JSPROP_ENUMERATE))) {
     return REFLECT_FAILURE;
diff --git a/toolkit/components/telemetry/TelemetrySession.jsm b/toolkit/components/telemetry/TelemetrySession.jsm
--- a/toolkit/components/telemetry/TelemetrySession.jsm
+++ b/toolkit/components/telemetry/TelemetrySession.jsm
@@ -825,36 +825,29 @@ var Impl = {
    *
    * This format is not straightforward to read and potentially bulky
    * with lots of zeros in the counts array.  Packing histograms makes
    * raw histograms easier to read and compresses the data a little bit.
    *
    * Returns an object:
    * { range: [min, max], bucket_count: <number of buckets>,
    *   histogram_type: <histogram_type>, sum: <sum>,
-   *   sum_squares_lo: <sum_squares_lo>,
-   *   sum_squares_hi: <sum_squares_hi>,
    *   values: { bucket1: count1, bucket2: count2, ... } }
    */
   packHistogram: function packHistogram(hgram) {
     let r = hgram.ranges;
     let c = hgram.counts;
     let retgram = {
       range: [r[1], r[r.length - 1]],
       bucket_count: r.length,
       histogram_type: hgram.histogram_type,
       values: {},
       sum: hgram.sum
     };
 
-    if (hgram.histogram_type != Telemetry.HISTOGRAM_EXPONENTIAL) {
-      retgram.sum_squares_lo = hgram.sum_squares_lo;
-      retgram.sum_squares_hi = hgram.sum_squares_hi;
-    }
-
     let first = true;
     let last = 0;
 
     for (let i = 0; i < c.length; i++) {
       let value = c[i];
       if (!value)
         continue;
 
diff --git a/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js b/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js
--- a/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js
+++ b/toolkit/components/telemetry/tests/unit/test_TelemetrySession.js
@@ -302,46 +302,40 @@ function checkPayload(payload, reason, s
   Assert.ok(!(IGNORE_CLONED_HISTOGRAM in payload.histograms));
 
   // Flag histograms should automagically spring to life.
   const expected_flag = {
     range: [1, 2],
     bucket_count: 3,
     histogram_type: 3,
     values: {0:1, 1:0},
-    sum: 0,
-    sum_squares_lo: 0,
-    sum_squares_hi: 0
+    sum: 0
   };
   let flag = payload.histograms[TELEMETRY_TEST_FLAG];
   Assert.equal(uneval(flag), uneval(expected_flag));
 
   // We should have a test count.
   const expected_count = {
     range: [1, 2],
     bucket_count: 3,
     histogram_type: 4,
     values: {0:1, 1:0},
     sum: 1,
-    sum_squares_lo: 1,
-    sum_squares_hi: 0,
   };
   let count = payload.histograms[TELEMETRY_TEST_COUNT];
   Assert.equal(uneval(count), uneval(expected_count));
 
   // There should be one successful report from the previous telemetry ping.
   if (successfulPings > 0) {
     const expected_tc = {
       range: [1, 2],
       bucket_count: 3,
       histogram_type: 2,
       values: {0:2, 1:successfulPings, 2:0},
-      sum: successfulPings,
-      sum_squares_lo: successfulPings,
-      sum_squares_hi: 0
+      sum: successfulPings
     };
     let tc = payload.histograms[TELEMETRY_SUCCESS];
     Assert.equal(uneval(tc), uneval(expected_tc));
   }
 
   // The ping should include data from memory reporters.  We can't check that
   // this data is correct, because we can't control the values returned by the
   // memory reporters.  But we can at least check that the data is there.
@@ -378,27 +372,23 @@ function checkPayload(payload, reason, s
 
   const expected_keyed_count = {
     "a": {
       range: [1, 2],
       bucket_count: 3,
       histogram_type: 4,
       values: {0:2, 1:0},
       sum: 2,
-      sum_squares_lo: 2,
-      sum_squares_hi: 0,
     },
     "b": {
       range: [1, 2],
       bucket_count: 3,
       histogram_type: 4,
       values: {0:1, 1:0},
       sum: 1,
-      sum_squares_lo: 1,
-      sum_squares_hi: 0,
     },
   };
   Assert.deepEqual(expected_keyed_count, keyedHistograms[TELEMETRY_TEST_KEYED_COUNT]);
 }
 
 function writeStringToFile(file, contents) {
   let ostream = Cc["@mozilla.org/network/safe-file-output-stream;1"]
                 .createInstance(Ci.nsIFileOutputStream);
diff --git a/toolkit/components/telemetry/tests/unit/test_nsITelemetry.js b/toolkit/components/telemetry/tests/unit/test_nsITelemetry.js
--- a/toolkit/components/telemetry/tests/unit/test_nsITelemetry.js
+++ b/toolkit/components/telemetry/tests/unit/test_nsITelemetry.js
@@ -31,24 +31,16 @@ function test_histogram(histogram_type, 
   for(let i=0;i<r.length;i++) {
     var v = r[i];
     sum += v;
     h.add(v);
   }
   var s = h.snapshot();
   // verify properties
   do_check_eq(sum, s.sum);
-  if (histogram_type == Telemetry.HISTOGRAM_EXPONENTIAL) {
-    do_check_false("sum_squares_lo" in s);
-    do_check_false("sum_squares_hi" in s);
-  } else {
-    // Doing the math to verify sum_squares was reflected correctly is
-    // tedious in JavaScript.  Just make sure we have something.
-    do_check_neq(s.sum_squares_lo + s.sum_squares_hi, 0);
-  }
 
   // there should be exactly one element per bucket
   for (let i of s.counts) {
     do_check_eq(i, 1);
   }
   var hgrams = Telemetry.histogramSnapshots
   gh = hgrams[name]
   do_check_eq(gh.histogram_type, histogram_type);
@@ -65,20 +57,16 @@ function test_histogram(histogram_type, 
 
   // Check that clearing works.
   h.clear();
   s = h.snapshot();
   for (var i of s.counts) {
     do_check_eq(i, 0);
   }
   do_check_eq(s.sum, 0);
-  if (histogram_type != Telemetry.HISTOGRAM_EXPONENTIAL) {
-    do_check_eq(s.sum_squares_lo, 0);
-    do_check_eq(s.sum_squares_hi, 0);
-  }
 
   h.add(0);
   h.add(1);
   var c = h.snapshot().counts;
   do_check_eq(c[0], 1);
   do_check_eq(c[1], 1);
 }
 
@@ -186,20 +174,16 @@ function test_getHistogramById() {
 function compareHistograms(h1, h2) {
   let s1 = h1.snapshot();
   let s2 = h2.snapshot();
 
   do_check_eq(s1.histogram_type, s2.histogram_type);
   do_check_eq(s1.min, s2.min);
   do_check_eq(s1.max, s2.max);
   do_check_eq(s1.sum, s2.sum);
-  if (s1.histogram_type != Telemetry.HISTOGRAM_EXPONENTIAL) {
-    do_check_eq(s1.sum_squares_lo, s2.sum_squares_lo);
-    do_check_eq(s1.sum_squares_hi, s2.sum_squares_hi);
-  }
 
   do_check_eq(s1.counts.length, s2.counts.length);
   for (let i = 0; i < s1.counts.length; i++)
     do_check_eq(s1.counts[i], s2.counts[i]);
 
   do_check_eq(s1.ranges.length, s2.ranges.length);
   for (let i = 0; i < s1.ranges.length; i++)
     do_check_eq(s1.ranges[i], s2.ranges[i]);
@@ -415,18 +399,16 @@ function test_keyed_boolean_histogram()
   const KEYED_ID = "test::keyed::boolean";
   let KEYS = numberRange(0, 2).map(i => "key" + (i + 1));
   KEYS.push("漢語");
   let histogramBase = {
     "min": 1,
     "max": 2,
     "histogram_type": 2,
     "sum": 1,
-    "sum_squares_lo": 1,
-    "sum_squares_hi": 0,
     "ranges": [0, 1, 2],
     "counts": [0, 1, 0]
   };
   let testHistograms = numberRange(0, 3).map(i => JSON.parse(JSON.stringify(histogramBase)));
   let testKeys = [];
   let testSnapShot = {};
 
   let h = Telemetry.newKeyedHistogram(KEYED_ID, "never", Telemetry.HISTOGRAM_BOOLEAN);
@@ -444,17 +426,16 @@ function test_keyed_boolean_histogram()
   Assert.deepEqual(h.keys().sort(), testKeys);
   Assert.deepEqual(h.snapshot(), testSnapShot);
 
   let key = KEYS[2];
   h.add(key, false);
   testKeys.push(key);
   testSnapShot[key] = testHistograms[2];
   testSnapShot[key].sum = 0;
-  testSnapShot[key].sum_squares_lo = 0;
   testSnapShot[key].counts = [1, 0, 0];
   Assert.deepEqual(h.keys().sort(), testKeys);
   Assert.deepEqual(h.snapshot(), testSnapShot);
 
   let allSnapshots = Telemetry.keyedHistogramSnapshots;
   Assert.deepEqual(allSnapshots[KEYED_ID], testSnapShot);
 
   h.clear();
@@ -466,18 +447,16 @@ function test_keyed_count_histogram()
 {
   const KEYED_ID = "test::keyed::count";
   const KEYS = numberRange(0, 5).map(i => "key" + (i + 1));
   let histogramBase = {
     "min": 1,
     "max": 2,
     "histogram_type": 4,
     "sum": 0,
-    "sum_squares_lo": 0,
-    "sum_squares_hi": 0,
     "ranges": [0, 1, 2],
     "counts": [1, 0, 0]
   };
   let testHistograms = numberRange(0, 5).map(i => JSON.parse(JSON.stringify(histogramBase)));
   let testKeys = [];
   let testSnapShot = {};
 
   let h = Telemetry.newKeyedHistogram(KEYED_ID, "never", Telemetry.HISTOGRAM_COUNT);
@@ -485,17 +464,16 @@ function test_keyed_count_histogram()
     let key = KEYS[i];
     let value = i*2 + 1;
 
     for (let k=0; k<value; ++k) {
       h.add(key);
     }
     testHistograms[i].counts[0] = value;
     testHistograms[i].sum = value;
-    testHistograms[i].sum_squares_lo = value;
     testSnapShot[key] = testHistograms[i];
     testKeys.push(key);
 
     Assert.deepEqual(h.keys().sort(), testKeys);
     Assert.deepEqual(h.snapshot(key), testHistograms[i]);
     Assert.deepEqual(h.snapshot(), testSnapShot);
   }
 
@@ -503,17 +481,16 @@ function test_keyed_count_histogram()
   Assert.deepEqual(h.keys().sort(), testKeys);
   Assert.deepEqual(h.snapshot(), testSnapShot);
 
   let key = KEYS[4];
   h.add(key);
   testKeys.push(key);
   testHistograms[4].counts[0] = 1;
   testHistograms[4].sum = 1;
-  testHistograms[4].sum_squares_lo = 1;
   testSnapShot[key] = testHistograms[4];
 
   Assert.deepEqual(h.keys().sort(), testKeys);
   Assert.deepEqual(h.snapshot(), testSnapShot);
 
   let allSnapshots = Telemetry.keyedHistogramSnapshots;
   Assert.deepEqual(allSnapshots[KEYED_ID], testSnapShot);
 
@@ -531,18 +508,16 @@ function test_keyed_flag_histogram()
   h.add(KEY, true);
 
   let testSnapshot = {};
   testSnapshot[KEY] = {
     "min": 1,
     "max": 2,
     "histogram_type": 3,
     "sum": 1,
-    "sum_squares_lo": 1,
-    "sum_squares_hi": 0,
     "ranges": [0, 1, 2],
     "counts": [0, 1, 0]
   };
 
   Assert.deepEqual(h.keys().sort(), [KEY]);
   Assert.deepEqual(h.snapshot(), testSnapshot);
 
   let allSnapshots = Telemetry.keyedHistogramSnapshots;
