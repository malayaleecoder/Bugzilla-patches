# HG changeset patch
# User malayaleecoder <malayaleecoder@gmail.com>
# Date 1471367388 -19800
#      Tue Aug 16 22:39:48 2016 +0530
# Branch Bug1287871
# Node ID a2f8c0c5996fdf9d27478d505d7adfc97a0903bc
# Parent  1a3b37f1fa19ba6fc3c209895a9d5e083cf9f199
Bug 1287871 - Talos profiler symbolication is broken. r?jmaher

diff --git a/testing/talos/talos/profiler/symbolication.py b/testing/talos/talos/profiler/symbolication.py
--- a/testing/talos/talos/profiler/symbolication.py
+++ b/testing/talos/talos/profiler/symbolication.py
@@ -11,16 +11,26 @@ import re
 import subprocess
 import urllib2
 import zipfile
 from distutils import spawn
 from symFileManager import SymFileManager
 from symbolicationRequest import SymbolicationRequest
 from symLogging import LogMessage
 
+"""
+Symbolication is broken when using type 'str' in python 2.7, so we use 'basestring'.
+But for python 3.0 compatibility, 'basestring' isn't defined, but the 'str' type works.
+So we force 'basestring' to 'str'.
+"""
+try:
+    basestring
+except NameError:
+    basestring = str
+
 
 class SymbolError(Exception):
     pass
 
 
 class OSXSymbolDumper:
 
     def __init__(self):
@@ -261,17 +271,17 @@ class ProfileSymbolicator:
             self.main_start_time = profile_start_time
         else:
             # We're a subprocess, so our markers will need to be offset
             # by the difference between the parent process start time
             # and this process's start time.
             delta_time = profile_start_time - self.main_start_time
 
         for i, thread in enumerate(profile_json["threads"]):
-            if isinstance(thread, str):
+            if isinstance(thread, basestring):
                 thread_json = json.loads(thread)
                 self.symbolicate_profile(thread_json)
                 profile_json["threads"][i] = json.dumps(thread_json)
             else:
                 for marker in thread["markers"]["data"]:
                     if marker[1]:
                         marker[1] += delta_time
 
@@ -292,26 +302,26 @@ class ProfileSymbolicator:
             addresses, shared_libraries)
         # print symbols_to_resolve
         symbolication_table = self._resolve_symbols(symbols_to_resolve)
         self._substitute_symbols_v3(profile_json, symbolication_table)
 
     def _find_addresses_v3(self, profile_json):
         addresses = set()
         for thread in profile_json["threads"]:
-            if isinstance(thread, str):
+            if isinstance(thread, basestring):
                 continue
             for s in thread["stringTable"]:
                 if s[0:2] == "0x":
                     addresses.add(s)
         return addresses
 
     def _substitute_symbols_v3(self, profile_json, symbolication_table):
         for thread in profile_json["threads"]:
-            if isinstance(thread, str):
+            if isinstance(thread, basestring):
                 continue
             for i, s in enumerate(thread["stringTable"]):
                 thread["stringTable"][i] = symbolication_table.get(s, s)
 
     def _find_addresses_v2(self, profile_json):
         addresses = set()
         for thread in profile_json["threads"]:
             for sample in thread["samples"]:
diff --git a/testing/talos/talos/profiler/symbolicationRequest.py b/testing/talos/talos/profiler/symbolicationRequest.py
--- a/testing/talos/talos/profiler/symbolicationRequest.py
+++ b/testing/talos/talos/profiler/symbolicationRequest.py
@@ -11,30 +11,40 @@ import urllib2
 # Precompiled regex for validating lib names
 # Empty lib name means client couldn't associate frame with any lib
 gLibNameRE = re.compile("[0-9a-zA-Z_+\-\.]*$")
 
 # Maximum number of times a request can be forwarded to a different server
 # for symbolication. Also prevents loops.
 MAX_FORWARDED_REQUESTS = 3
 
+"""
+Symbolication is broken when using type 'str' in python 2.7, so we use 'basestring'.
+But for python 3.0 compatibility, 'basestring' isn't defined, but the 'str' type works.
+So we force 'basestring' to 'str'.
+"""
+try:
+    basestring
+except NameError:
+    basestring = str
+
 
 class ModuleV3:
 
     def __init__(self, libName, breakpadId):
         self.libName = libName
         self.breakpadId = breakpadId
 
 
 def getModuleV3(libName, breakpadId):
-    if not isinstance(libName, str) or not gLibNameRE.match(libName):
+    if not isinstance(libName, basestring) or not gLibNameRE.match(libName):
         LogTrace("Bad library name: " + str(libName))
         return None
 
-    if not isinstance(breakpadId, str):
+    if not isinstance(breakpadId, basestring):
         LogTrace("Bad breakpad id: " + str(breakpadId))
         return None
 
     return ModuleV3(libName, breakpadId)
 
 
 class SymbolicationRequest:
 
